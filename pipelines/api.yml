trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

stages:
- stage: Build
  jobs:
  - job: BuildAndPack
    displayName: 'Build and pack'
    steps:
      - task: UseDotNet@2
        displayName: 'Use dotnet core 5.0'
        inputs:
          version: '5.0.x'

      - task: DotNetCoreCLI@2
        displayName: 'Restore packages'
        inputs:
          command: 'restore'
          projects: '**/*.csproj'
          configuration: $(buildConfiguration)
          feedsToUse: 'select'

      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          command: 'build'
          configuration: $(buildConfiguration)
          projects: '**/*.csproj'
      
      - task: DotNetCoreCLI@2
        displayName: 'Run integration tests'
        inputs:
          command: 'test'
          arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage"'
          projects: '**/SheetMusic.Api.Test.csproj'

      - task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
        displayName: 'Generate Code Coverage Report'
        inputs:
          reports: $(Agent.TempDirectory)/**/coverage.cobertura.xml
          targetdir: $(Agent.TempDirectory)/CoverageResults/
          reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
        
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage report'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(Agent.TempDirectory)/CoverageResults/Cobertura.xml
          reportDirectory: $(Agent.TempDirectory)/CoverageResults
          failIfCoverageEmpty: true

      # - task: DotNetCoreCLI@2
      #   displayName: 'Create zip'
      #   inputs:
      #     command: 'publish'
      #     arguments: '--output $(Build.ArtifactStagingDirectory)'
      #     modifyOutputPath: true
      #     publishWebProjects: true

      # - task: PublishBuildArtifacts@1
      #   inputs:
      #     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      #     ArtifactName: 'drop'
      #     publishLocation: 'Container'

- stage: DeployToTest
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployToTest
    displayName: 'Deploy to test'
    pool: 'Hosted VS2017'
    environment: 'API test'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Publish to azure'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Visual Studio Professional(8ba210c5-c187-44bb-9d0b-858282bb4487)'
              appType: 'webApp'
              WebAppName: 'sheet-music-api-test'
              packageForLinux: '$(Pipeline.Workspace)/**/*.zip'

- stage: DeployToProd
  dependsOn: DeployToTest
  condition: succeeded()
  jobs:
  - deployment: DeployToProd
    displayName: 'Deploy to production'
    pool: 'Hosted VS2017'
    environment: 'API production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            enabled: false
            displayName: 'Publish to azure - Windows'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Visual Studio Professional(8ba210c5-c187-44bb-9d0b-858282bb4487)'
              appType: 'webApp'
              WebAppName: 'sheetmusic-api'
              packageForLinux: '$(Pipeline.Workspace)/**/*.zip'

          - task: AzureRmWebAppDeployment@4
            displayName: 'Publish to azure - Linux'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Visual Studio Professional(8ba210c5-c187-44bb-9d0b-858282bb4487)'
              appType: 'webApp'
              WebAppName: 'sheet-music-api'
              packageForLinux: '$(Pipeline.Workspace)/**/*.zip'

